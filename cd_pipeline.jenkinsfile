pipeline {
    agent any 

    environment { 
        CI_BUILD_NUMBER= sh (returnStdout: true, script: 'echo $(curl -s ${JENKINS_URL}job/DevSecOps_CI_Pipeline/lastSuccessfulBuild/buildNumber)').trim()
    }
    
    stages {

        stage('Connect Docker Registry') { 
            steps {
                withCredentials([usernamePassword(credentialsId: 'sk_dockerhub_creds', passwordVariable: 'PASS', usernameVariable: 'USER')])  {
                    sh 'docker login --username ${USER} --password ${PASS}'
                    sh 'docker pull yeskay16/devsecopsapp:$CI_BUILD_NUMBER'
                }
            }	
        }	

        stage('Docker Image Trivy Scan') { 
            steps {
                // sh "trivy image --exit-code 1 --severity CRITICAL pkuma343/myimage:${env.BUILD_NUMBER}"		
                sh "trivy image --exit-code 0 yeskay16/devsecopsapp:$CI_BUILD_NUMBER"
            }
        }

        stage('Application Deploy') {
            steps {
                sh 'docker run --rm --net=ci-dev -d -p 8000:8080 --hostname app --name app yeskay16/devsecopsapp:$CI_BUILD_NUMBER'
            }
        }

        stage('Sanity Check') { 
            steps {
                sleep(10);
                sh 'curl -s -o /dev/null -w "%{http_code}" localhost:8000/users/1000/userinfo || echo "API FAILURE: Status Code is not 200 OK!"'
            }
        }
    
        stage('OWASP ZAP Scan') { 
            steps {
                sh 'docker run --rm -t --net=ci-dev --hostname zap --name zap owasp/zap2docker-bare:latest zap.sh -cmd -quickurl http://app:8000/users/1000/userinfo > ZAP.xml'
                sh 'sed -i 1,12d ZAP.xml'
                archiveArtifacts artifacts: 'ZAP.xml'
            }
        }

    }
    
    post { 
        always {
            sh 'docker stop app zap || true'
            sh 'docker rmi -f yeskay16/devsecopsapp:$CI_BUILD_NUMBER'
        }
    }
}
